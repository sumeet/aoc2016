section .text
;; TODO: without libc
global main
extern printf

; numbers (starts in the middle at 5)
; 123
; 456
; 789

%define cursor_reg r8
%define init_cursor_reg() mov r8, 5

%define op_reg r9

%macro cmp_const 2
  mov op_reg, %1
  cmp op_reg, %2
%endmacro

%macro test_can_go_up_from 1
  cmp %1, 1
  je %%false
  cmp %1, 2
  je %%false
  cmp %1, 3
  je %%false
  jmp %%true
  %%false:
    cmp_const 1, 0
    jmp %%end
  %%true:
    cmp_const 1, 1
  %%end:
%endmacro

%macro test_can_go_left_from 1
  cmp %1, 1
  je %%false
  cmp %1, 4
  je %%false
  cmp %1, 7
  je %%false
  jmp %%true
  %%false:
    cmp_const 1, 0
    jmp %%end
  %%true:
    cmp_const 1, 1
  %%end:
%endmacro

%macro test_can_go_right_from 1
  cmp %1, 3
  je %%false
  cmp %1, 6
  je %%false
  cmp %1, 9
  je %%false
  jmp %%true
  %%false:
    cmp_const 1, 0
    jmp %%end
  %%true:
    cmp_const 1, 1
  %%end:
%endmacro

%macro test_can_go_down_from 1
  cmp %1, 7
  je %%false
  cmp %1, 8
  je %%false
  cmp %1, 9
  je %%false
  jmp %%true
  %%false:
    cmp_const 1, 0
    jmp %%end
  %%true:
    cmp_const 1, 1
  %%end:
%endmacro

%define get_number(n) byte [numbers + n - 1]

%macro passcode_insert_num 1
; %1: number to insert (reg)
  movzx rax, byte [passcode_len]
  movzx rbx, get_number(%1)
  mov [passcode + rax], rbx
  inc byte [passcode_len]
%endmacro

%define INPUT input

main:
init:
  init_cursor_reg()
parse_loop:
  mov rax, [input_cursor]
  movzx rax, byte [rax + INPUT]

  cmp rax, 0
  je handle_null_terminator

  cmp rax, 10 
  je handle_newline

  cmp rax, 'U'
  je handle_up

  cmp rax, 'L'
  je handle_left

  cmp rax, 'R'
  je handle_right

  cmp rax, 'D'
  je handle_down

  ; this should never happen
  jmp panic
handle_up:
  test_can_go_up_from cursor_reg
  jne continue_parse_loop
move_up:
  sub cursor_reg, 3
  jmp continue_parse_loop
handle_left:
  test_can_go_left_from cursor_reg
  jne continue_parse_loop
move_left:
  sub cursor_reg, 1
  jmp continue_parse_loop
handle_right:
  test_can_go_right_from cursor_reg
  jne continue_parse_loop
move_right:
  add cursor_reg, 1
  jmp continue_parse_loop
handle_down:
  test_can_go_down_from cursor_reg
  jne continue_parse_loop
move_down:
  add cursor_reg, 3
continue_parse_loop:
  inc qword [input_cursor]
  jmp parse_loop
handle_newline:
  passcode_insert_num cursor_reg
  jmp continue_parse_loop
handle_null_terminator:
  passcode_insert_num cursor_reg
  jmp print
panic:
  hlt
print:
  mov rsi, passcode
  mov rdi, message
  mov rax, 0
  call printf
  mov rax, 0
  ret

section .data
numbers db "123456789", 0

passcode times 100 db 0
passcode_len: db 0

message db "%s", 10, 0

input_cursor: dq 0

sample db "ULL", 10, \
  "RRDDD", 10, \
  "LURDL", 10, \
  "UUUUD", 0
input db \
  "UDRLRRRUULUUDULRULUDRDRURLLDUUDURLUUUDRRRLUUDRUUDDDRRRLRURLLLDDDRDDRUDDULUULDDUDRUUUDLRLLRLDUDUUUUDLDULLLDRLRLRULDDDDDLULURUDURDDLLRDLUDRRULDURDDLUDLLRRUDRUDDDLLURULRDDDRDRRLLUUDDLLLLRLRUULRDRURRRLLLLDULDDLRRRRUDRDULLLDDRRRDLRLRRRLDRULDUDDLDLUULRDDULRDRURRURLDULRUUDUUURDRLDDDURLDURLDUDURRLLLLRDDLDRUURURRRRDRRDLUULLURRDLLLDLDUUUDRDRULULRULUUDDULDUURRLRLRRDULDULDRUUDLLUDLLLLUDDULDLLDLLURLLLRUDRDLRUDLULDLLLUDRLRLUDLDRDURDDULDURLLRRRDUUDLRDDRUUDLUURLDRRRRRLDDUUDRURUDLLLRRULLRLDRUURRRRRLRLLUDDRLUDRRDUDUUUDRUDULRRULRDRRRDDRLUUUDRLLURURRLLDUDRUURDLRURLLRDUDUUDLLLUULLRULRLDLRDDDU", 10, \
  "DRRRDRUDRLDUUDLLLRLULLLUURLLRLDRLURDRDRDRLDUUULDRDDLDDDURURUDRUUURDRDURLRLUDRRRDURDRRRDULLRDRRLUUUURLRUULRRDUDDDDUURLDULUDLLLRULUDUURRDUULRRDDURLURRUDRDRLDLRLLULULURLRDLRRRUUURDDUUURDRDRUURUDLULDRDDULLLLLRLRLLUDDLULLUDDLRLRDLDULURDUDULRDDRLUDUUDUDRLLDRRLLDULLRLDURUDRLRRRDULUUUULRRLUDDDLDUUDULLUUURDRLLULRLDLLUUDLLUULUULUDLRRDDRLUUULDDRULDRLURUURDLURDDRULLLLDUDULUDURRDRLDDRRLRURLLRLLLLDURDLUULDLDDLULLLRDRRRDLLLUUDDDLDRRLUUUUUULDRULLLDUDLDLURLDUDULRRRULDLRRDRUUUUUURRDRUURLDDURDUURURULULLURLLLLUURDUDRRLRRLRLRRRRRULLDLLLRURRDULLDLLULLRDUULDUDUDULDURLRDLDRUUURLLDLLUUDURURUD", 10, \
  "UDUUUUURUDLLLRRRDRDRUDDRLLDRRLDRLLUURRULUULULRLLRUDDRLDRLUURDUDLURUULLLULLRRRULRLURRDDULLULULRUDDDUURDRLUDUURRRRUUULLRULLLDLURUDLDDLLRRRULDLLUURDRRRDRDURURLRUDLDLURDDRLLLUUDRUULLDLLLLUUDRRURLDDUDULUDLDURDLURUURDUUUURDLLLRUUURDUUUDLDUDDLUDDUDUDUDLDUDUUULDULUURDDLRRRULLUDRRDLUDULDURUURULLLLUDDDLURURLRLRDLRULRLULURRLLRDUDUDRULLRULRUDLURUDLLDUDLRDRLRDURURRULLDDLRLDDRLRDRRDLRDDLLLLDUURRULLRLLDDLDLURLRLLDULRURRRRDULRLRURURRULULDUURRDLURRDDLDLLLRULRLLURLRLLDDLRUDDDULDLDLRLURRULRRLULUDLDUDUDDLLUURDDDLULURRULDRRDDDUUURLLDRDURUDRUDLLDRUD", 10, \
  "ULRDULURRDDLULLDDLDDDRLDUURDLLDRRRDLLURDRUDDLDURUDRULRULRULULUULLLLDRLRLDRLLLLLRLRRLRLRRRDDULRRLUDLURLLRLLURDDRRDRUUUDLDLDRRRUDLRUDDRURRDUUUDUUULRLDDRDRDRULRLLDLDDLLRLUDLLLLUURLDLRUDRLRDRDRLRULRDDURRLRUDLRLRLDRUDURLRDLDULLUUULDRLRDDRDUDLLRUDDUDURRRRDLDURRUURDUULLDLRDUDDLUDDDRRRULRLULDRLDDRUURURLRRRURDURDRULLUUDURUDRDRLDLURDDDUDDURUDLRULULURRUULDRLDULRRRRDUULLRRRRLUDLRDDRLRUDLURRRDRDRLLLULLUULRDULRDLDUURRDULLRULRLRRURDDLDLLRUUDLRLDLRUUDLDDLLULDLUURRRLRDULRLRLDRLDUDURRRLLRUUDLUURRDLDDULDLULUUUUDRRULLLLLLUULDRULDLRUDDDRDRDDURUURLURRDLDDRUURULLULUUUDDLRDULDDLULDUDRU", 10, \
  "LRLRLRLLLRRLUULDDUUUURDULLLRURLDLDRURRRUUDDDULURDRRDURLRLUDLLULDRULLRRRDUUDDRDRULLDDULLLUURDLRLRUURRRLRDLDUDLLRLLURLRLLLDDDULUDUDRDLRRLUDDLRDDURRDRDUUULLUURURLRRDUURLRDLLUDURLRDRLURUURDRLULLUUUURRDDULDDDRULURUULLUDDDDLRURDLLDRURDUDRRLRLDLRRDDRRDDRUDRDLUDDDLUDLUDLRUDDUDRUDLLRURDLRUULRUURULUURLRDULDLDLLRDRDUDDDULRLDDDRDUDDRRRLRRLLRRRUUURRLDLLDRRDLULUUURUDLULDULLLDLULRLRDLDDDDDDDLRDRDUDLDLRLUDRRDRRDRUURDUDLDDLUDDDDDDRUURURUURLURLDULUDDLDDLRUUUULRDRLUDLDDLLLRLLDRRULULRLRDURRRLDDRDDRLU", 0
